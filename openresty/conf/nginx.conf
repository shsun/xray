worker_processes  1;
error_log  logs/error.log  info;
#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
	lua_package_path './lua/?.lua';
	
	lua_shared_dict shared_dict 2m;
    lua_shared_dict ip_cache 32m;
    
    lua_socket_connect_timeout 100ms;
    lua_socket_read_timeout 100ms;
   	lua_socket_send_timeout 100ms;
	
	upstream default_upstream {  
		server 127.0.0.1:8081;
	   	server 127.0.0.1:8082;
	}
	
	upstream default_doc_upstream {  
		server www.shsun8081.com:8081;
	   	server www.shsun8082.com:8082;	
	}	
			

	# http://www.tinybeargame.com/1/1.json
	# http://www.tinybeargame.com/2/2.json
	# http://www.tinybeargame.com/3/3.json
	upstream tinybeargame_upstream {  
		server www.tinybeargame.com;
	}
	
		
	upstream public_upstream {  
		server www.163.com;
	   	server www.qq.com;	
	}	
    upstream default_upstream_bak {  
        server www.163.com weight=10;
        server www.sina.com weight=10;  
    }
    
    #upstream mysql_backend {
	#	drizzle_server 127.0.0.1:3306 dbname=ibase4j password=123456 user=root  protocol=mysql;
     #}

    
    
    
	#include       mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    #access_log  		logs/access.log  main;
    sendfile        		on;
    #tcp_nopush     		on;
    #keepalive_timeout  	0;
    keepalive_timeout  	65;
    gzip  				on;
    
    server {
        listen       80;
        server_name  localhost;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        
        set $log_val '';
        
        location / {
            root   html;
            index  index.html index.htm;
			#content_by_lua_file /Users/shsun/repos/xray/openresty/src/x_all.lua;
            proxy_pass http://default_upstream;
        }
        
		location /l {		 
		
			set $my_upstream $my_upstream;  
            set $my_uri $my_uri; 
            		
            #init_by_lua_file x_1_init_by_lua_file.lua
            #init_worker_by_lua_file x_2_init_worker_by_lua_file.lua
            #set_by_lua_file x_3_set_by_lua_file.lua
            #rewrite_by_lua_file x_4_rewrite_by_lua_file.lua
            #access_by_lua_file x_5_access_by_lua_file.lua
            #content_by_lua_file x_6_content_by_lua_file.lua
            #header_filter_by_lua_file x_7_header_filter_by_lua_file.lua
            #body_filter_by_lua_file x_8_body_filter_by_lua_file.lua
            #rewrite_by_lua_file /Users/shsun/repos/xray/openresty/src/x_all.lua;
			#content_by_lua_file /Users/shsun/repos/xray/openresty/src/x_all.lua;
            #content_by_lua_file /Users/shsun/repos/xray/openresty/src/x_6_content_by_lua_file.lua;
			
			
		 	#internal;
		 	#error_log logs/error.log debug;		 	
		 	#default_type 'text/html';
		 	#default_type 'text/plain';
		 	
		 	
            #set_by_lua_file $res /Users/shsun/repos/xray/openresty/src/x_3_set_by_lua_file.lua;
          	content_by_lua_file /Users/shsun/repos/xray/openresty/src/x_6_content_by_lua_file.lua;
          	#log_by_lua_file /Users/shsun/repos/xray/openresty/src/x_9_log_by_lua_file.lua;
			
			#proxy_pass http://$res;
          	proxy_pass http://$my_upstream;
		}

        location /docs/ {
        		keepalive_timeout 0;
        		default_type 'text/html';
        				        		        
            set $target '127.0.0.1:8089';           
            set_by_lua $res '
            		local x = require("x");		               	
				return x.sayhi();				
            ';
            
            proxy_pass http://$res;
        }
        
        location /g {
        		default_type 'text/plain';		
        
            resolver 8.8.4.4;  # use Google's open DNS server

            set $target '';
            access_by_lua '
                local key = ngx.var.http_user_agent
                if not key then
                    ngx.log(ngx.ERR, "no user-agent found")
                    return ngx.exit(400)
                end

				--[[
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 second

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                else
                    ngx.log(ngx.INFO, "connect to redis success")                	    
                end

                local host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                else
                    ngx.log(ngx.INFO, "success to get redis key: ", key)                    
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
               	else
                    ngx.log(ngx.INFO, "the host found for key ", key)                    
                	end
				]]
				
               	#ngx.var.target = host
               	ngx.var.target = "127.0.0.1"                
            ';

            proxy_pass http://$target;
        }			
        
        	
		#location = /mysql {
		# 	internal;
		# 	error_log 		logs/worker.log info;
		# 	drizzle_query  	$request_body;
		# 	drizzle_pass 	mysql_backend;		
		#}
		
        
        
        
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
